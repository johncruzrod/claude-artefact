import React, { useState, useEffect, useRef } from 'react';

const MASS_COLOURS = ['red', 'blue', 'green', 'orange', 'purple'];

const MultiPendulum = () => {
  // Number of pendulum masses (points) from 1 to 5
  const [numMasses, setNumMasses] = useState(2);

  // For each mass, we store an initial angle (from vertical), rod length, and mass.
  // (The double pendulum equations use only the first two values.)
  const [angles, setAngles] = useState([Math.PI / 2, Math.PI / 2, Math.PI / 2, Math.PI / 2, Math.PI / 2]);
  const [lengths, setLengths] = useState([80, 80, 80, 80, 80]);
  const [masses, setMasses] = useState([10, 10, 10, 10, 10]);

  // Global simulation parameters
  const [gravity, setGravity] = useState(20.);
  const [damping, setDamping] = useState(0.999);
  const [zoom, setZoom] = useState(1);

  const canvasRef = useRef(null);
  const animationRef = useRef(null);

  // Trails for each mass
  let trails = [];

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    // We'll maintain local arrays for the angles and angular velocities.
    // For indices 0 and 1 we use the classic double pendulum equations.
    // For indices >= 2, we update using the simple pendulum formula.
    let localAngles = [];
    let localVelocities = [];
    for (let i = 0; i < numMasses; i++) {
      localAngles[i] = angles[i];
      localVelocities[i] = 0;
    }

    // Initialize trails for each mass
    trails = Array.from({ length: numMasses }, () => []);

    // Fixed pivot point
    const pivotX = canvas.width / 2;
    const pivotY = canvas.height / 3;

    const dt = 0.05;

    const animate = () => {
      // Clear the canvas (white background)
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // We'll compute positions for each mass and store them in an array.
      let positions = [];

      // --- Update for Mass 0 ---
      if (numMasses > 0) {
        // For a single mass, treat it as a simple pendulum.
        if (numMasses === 1) {
          let acc = -(gravity / (lengths[0] * zoom)) * Math.sin(localAngles[0]);
          localVelocities[0] += acc * dt;
          localAngles[0] += localVelocities[0] * dt;
          localVelocities[0] *= damping;
        }
        positions[0] = {
          x: pivotX + lengths[0] * zoom * Math.sin(localAngles[0]),
          y: pivotY + lengths[0] * zoom * Math.cos(localAngles[0])
        };
      }

      // --- Update for Mass 1 (Double Pendulum Equations) ---
      if (numMasses >= 2) {
        // Use the classic double pendulum equations for masses 0 and 1.
        const m1 = masses[0], m2 = masses[1];
        const l1 = lengths[0] * zoom, l2 = lengths[1] * zoom;
        const a1 = localAngles[0], a2 = localAngles[1];
        const a1Vel = localVelocities[0], a2Vel = localVelocities[1];

        const num1 = -gravity * (2 * m1 + m2) * Math.sin(a1);
        const num2 = -m2 * gravity * Math.sin(a1 - 2 * a2);
        const num3 = -2 * Math.sin(a1 - a2) * m2;
        const num4 = a2Vel * a2Vel * l2 + a1Vel * a1Vel * l1 * Math.cos(a1 - a2);
        const den = l1 * (2 * m1 + m2 - m2 * Math.cos(2 * a1 - 2 * a2));
        const a1Acc = (num1 + num2 + num3 * num4) / den;

        const num5 = 2 * Math.sin(a1 - a2);
        const num6 = a1Vel * a1Vel * l1 * (m1 + m2);
        const num7 = gravity * (m1 + m2) * Math.cos(a1);
        const num8 = a2Vel * a2Vel * l2 * m2 * Math.cos(a1 - a2);
        const den2 = l2 * (2 * m1 + m2 - m2 * Math.cos(2 * a1 - 2 * a2));
        const a2Acc = (num5 * (num6 + num7 + num8)) / den2;

        localVelocities[0] += a1Acc * dt;
        localVelocities[1] += a2Acc * dt;
        localAngles[0] += localVelocities[0] * dt;
        localAngles[1] += localVelocities[1] * dt;
        localVelocities[0] *= damping;
        localVelocities[1] *= damping;

        // Position for mass 1 is computed relative to mass 0.
        positions[1] = {
          x: positions[0].x + lengths[1] * zoom * Math.sin(localAngles[1]),
          y: positions[0].y + lengths[1] * zoom * Math.cos(localAngles[1])
        };
      }

      // --- Update for Additional Masses (3rd up to numMasses) ---
      // For indices 2 and above, we update each as a simple pendulum whose pivot is the previous mass.
      for (let i = 2; i < numMasses; i++) {
        let acc = -(gravity / (lengths[i] * zoom)) * Math.sin(localAngles[i]);
        localVelocities[i] += acc * dt;
        localAngles[i] += localVelocities[i] * dt;
        localVelocities[i] *= damping;

        positions[i] = {
          x: positions[i - 1].x + lengths[i] * zoom * Math.sin(localAngles[i]),
          y: positions[i - 1].y + lengths[i] * zoom * Math.cos(localAngles[i])
        };
      }

      // --- Draw the fixed pivot ---
      ctx.beginPath();
      ctx.arc(pivotX, pivotY, 5, 0, 2 * Math.PI);
      ctx.fillStyle = 'black';
      ctx.fill();

      // --- Draw rods, trails, and masses for each point ---
      for (let i = 0; i < numMasses; i++) {
        const pivotPoint = i === 0 ? { x: pivotX, y: pivotY } : positions[i - 1];
        // Draw rod from pivotPoint to current mass position
        ctx.beginPath();
        ctx.moveTo(pivotPoint.x, pivotPoint.y);
        ctx.lineTo(positions[i].x, positions[i].y);
        ctx.strokeStyle = '#555';
        ctx.lineWidth = 2;
        ctx.stroke();

        // Update and draw trail for mass i
        trails[i].push({ x: positions[i].x, y: positions[i].y });
        if (trails[i].length > 200) trails[i].shift();
        ctx.beginPath();
        for (let j = 0; j < trails[i].length; j++) {
          ctx.lineTo(trails[i][j].x, trails[i][j].y);
          ctx.strokeStyle = `rgba(${getRgb(MASS_COLOURS[i])}, ${j / trails[i].length})`;
          ctx.stroke();
        }

        // Draw the mass as a filled circle
        ctx.beginPath();
        ctx.arc(positions[i].x, positions[i].y, 10, 0, 2 * Math.PI);
        ctx.fillStyle = MASS_COLOURS[i];
        ctx.fill();
      }

      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [numMasses, angles, lengths, masses, gravity, damping, zoom]);

  // Helper to convert named colours to RGB strings.
  const getRgb = (colorName) => {
    switch (colorName) {
      case 'red': return '255,0,0';
      case 'blue': return '0,0,255';
      case 'green': return '0,128,0';
      case 'orange': return '255,165,0';
      case 'purple': return '128,0,128';
      default: return '0,0,0';
    }
  };

  // Handlers to update array values for each mass
  const handleAngleChange = (index, value) => {
    const newAngles = [...angles];
    newAngles[index] = parseFloat(value);
    setAngles(newAngles);
  };
  const handleLengthChange = (index, value) => {
    const newLengths = [...lengths];
    newLengths[index] = parseFloat(value);
    setLengths(newLengths);
  };
  const handleMassChange = (index, value) => {
    const newMasses = [...masses];
    newMasses[index] = parseFloat(value);
    setMasses(newMasses);
  };

  return (
    <div className="flex">
      {/* Controls Panel (Left) */}
      <div className="w-64 p-4 bg-gray-100 rounded-lg flex-shrink-0">
        <h2 className="text-lg font-bold text-gray-800 mb-4">Simulation Controls</h2>
        {/* Number of Masses */}
        <div className="mb-4">
          <label htmlFor="numMasses" className="block text-sm font-medium text-gray-700 mb-1">
            Number of Masses: {numMasses}
          </label>
          <input
            id="numMasses"
            type="range"
            min={1}
            max={5}
            step={1}
            value={numMasses}
            onChange={(e) => setNumMasses(parseInt(e.target.value))}
            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
          />
        </div>
        {/* Sliders for each mass */}
        {Array.from({ length: 5 }).map((_, i) => {
          if (i >= numMasses) return null;
          return (
            <div key={i} className="mb-4 border border-gray-200 p-2 rounded">
              <p className="font-semibold text-sm text-gray-600">
                Mass {i + 1} ({MASS_COLOURS[i]})
              </p>
              <label className="block text-xs text-gray-700 mt-2">
                Initial Angle: {angles[i].toFixed(2)} rad
              </label>
              <input
                type="range"
                min={0}
                max={Math.PI * 2}
                step={0.01}
                value={angles[i]}
                onChange={(e) => handleAngleChange(i, e.target.value)}
                className="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer"
              />
              <label className="block text-xs text-gray-700 mt-2">
                Length: {lengths[i]} px
              </label>
              <input
                type="range"
                min={20}
                max={200}
                step={1}
                value={lengths[i]}
                onChange={(e) => handleLengthChange(i, e.target.value)}
                className="w-full h-2 bg-green-200 rounded-lg appearance-none cursor-pointer"
              />
              <label className="block text-xs text-gray-700 mt-2">
                Mass: {masses[i]} kg
              </label>
              <input
                type="range"
                min={1}
                max={50}
                step={1}
                value={masses[i]}
                onChange={(e) => handleMassChange(i, e.target.value)}
                className="w-full h-2 bg-red-200 rounded-lg appearance-none cursor-pointer"
              />
            </div>
          );
        })}
        {/* Global sliders */}
        <div className="mb-4">
          <label htmlFor="gravity-slider" className="block text-sm font-medium text-gray-700 mb-1">
            Gravity: {gravity.toFixed(2)} m/s²
          </label>
          <input
            id="gravity-slider"
            type="range"
            min={0}
            max={20}
            step={0.1}
            value={gravity}
            onChange={(e) => setGravity(parseFloat(e.target.value))}
            className="w-full h-2 bg-yellow-200 rounded-lg appearance-none cursor-pointer"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="damping-slider" className="block text-sm font-medium text-gray-700 mb-1">
            Damping: {damping.toFixed(3)}
          </label>
          <input
            id="damping-slider"
            type="range"
            min={0.95}
            max={1}
            step={0.001}
            value={damping}
            onChange={(e) => setDamping(parseFloat(e.target.value))}
            className="w-full h-2 bg-purple-200 rounded-lg appearance-none cursor-pointer"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="zoom-slider" className="block text-sm font-medium text-gray-700 mb-1">
            Zoom: {zoom.toFixed(2)}
          </label>
          <input
            id="zoom-slider"
            type="range"
            min={0.1}
            max={2}
            step={0.01}
            value={zoom}
            onChange={(e) => setZoom(parseFloat(e.target.value))}
            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
          />
        </div>
      </div>
      {/* Pendulum View (Right) */}
      <div className="flex flex-col items-center p-4">
        <canvas ref={canvasRef} width={600} height={600} className="border border-gray-300 rounded" />
      </div>
    </div>
  );
};

export default MultiPendulum;
